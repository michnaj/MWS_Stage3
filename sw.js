const staticCacheName="restrev-v1",imagesCacheName="restrev-img-v1",allCaches=["restrev-v1",imagesCacheName],repository="";function servePhoto(e){let t=e.url.replace(/_\d+px\.jpg$/,"");return caches.open(imagesCacheName).then(function(n){return n.match(t).then(function(r){return r||fetch(e).then(function(e){let r=e.clone();return n.put(t,r),e}).catch(function(){return new Response("<h1>Connection error!</h1><p>Sorry, Information is not available. Check your Internet coonnection!</p>",{headers:{"Content-Type":"text/html"}})})})})}self.addEventListener("install",function(e){e.waitUntil(caches.open("restrev-v1").then(function(e){return e.addAll(["/","/index.html","/sw.js","/css/styles.css","/js/dball.js","/js/main.js","/js/restaurant_info.js","/ico/restaurant_512.png","/ico/restaurant_192.png"])}))}),self.addEventListener("activate",function(e){e.waitUntil(caches.keys().then(function(e){return Promise.all(e.filter(function(e){return e.startsWith("restrev-")&&!allCaches.includes(e)}).map(function(e){return cache.delete(e)}))}))}),self.addEventListener("fetch",function(e){let t=new URL(e.request.url);t.pathname.endsWith("/restaurants")||(t.pathname.startsWith("/img/")?e.respondWith(servePhoto(e.request)):e.respondWith(caches.match(e.request).then(function(t){return t||fetch(e.request).then(function(t){let n=t.clone();return caches.open("restrev-v1").then(function(t){t.put(e.request,n)}),t}).catch(function(){return new Response("<h1>Connection error!</h1><p>Sorry, Information is not available. Check your Internet coonnection!</p>",{headers:{"Content-Type":"text/html"}})})})))});